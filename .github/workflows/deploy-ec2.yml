# Nombre del workflow que aparecerá en la pestaña Actions de GitHub
name: Build and Deploy to EC2

# Define cuándo se ejecutará el workflow
on:
  push:
    branches: [ main ]  # Se ejecuta cuando hay un push a la rama main

# Definición de los trabajos a ejecutar
jobs:
  deploy:
    runs-on: ubuntu-latest    # Usa una máquina virtual Ubuntu para ejecutar el workflow
    
    steps:
    # Paso 1: Descarga el código del repositorio
    - uses: actions/checkout@v4
    
    # Paso 2: Configura el entorno .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'    # Especifica la versión de .NET a usar
    
    # Paso 3: Lista la estructura del proyecto para debugging
    - name: Debug Directory Structure
      run: |
        echo "Current directory:"
        pwd
        echo "Project structure:"
        ls -R
    
    # Paso 4: Restaura las dependencias del proyecto
    - name: Restore dependencies
      run: dotnet restore ./WebSockets/WebSockets.sln
    
    # Paso 5: Compila el proyecto en modo Release
    - name: Build
      run: dotnet build ./WebSockets/WebSockets.sln --configuration Release --no-restore
    
    # Paso 6: Publica la aplicación
    - name: Publish
      run: dotnet publish ./WebSockets/WebSockets.csproj --configuration Release --no-build --output ./publish
    
    # Paso 7: Genera el archivo web.config con la configuración de IIS
    - name: Generate web.config
      run: |
        cat > publish/web.config << 'EOL'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" arguments=".\WebSockets.dll" 
                stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" hostingModel="inprocess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
                  <environmentVariable name="FIREBASE_CREDENTIALS" value="${{ secrets.FIREBASE_CREDENTIALS }}" />
                  <environmentVariable name="ConnectionStrings__DefaultConnection" value="${{ secrets.DB_CONNECTION }}" />
                </environmentVariables>
              </aspNetCore>
            </system.webServer>
          </location>
        </configuration>
        EOL

    # Paso 8: Crea el paquete de despliegue
    - name: Create deployment package
      run: |
        cd publish
        zip -r ../deploy.zip *
    
    # Paso 9: Despliega a EC2 usando SCP y SSH
    - name: Deploy to EC2
      shell: bash
      env:
        SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Configurar SSH key
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Copiar archivo usando SCP
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.zip Administrator@${EC2_HOST}:C:/WebPages/chatHome/
        
        # Ejecutar comandos remotos usando SSH
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no Administrator@${EC2_HOST} "
          powershell -Command \"
            Expand-Archive -Path C:/WebPages/chatHome/deploy.zip -DestinationPath C:/WebPages/chatHome -Force;
            Remove-Item C:/WebPages/chatHome/deploy.zip -Force;
            & 'C:\Windows\System32\inetsrv\appcmd.exe' stop site 'chatHome';
            Start-Sleep -Seconds 5;
            & 'C:\Windows\System32\inetsrv\appcmd.exe' start site 'chatHome'
          \"
        "






















